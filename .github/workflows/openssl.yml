# This is a basic workflow to help you get started with Actions

name: Docker OpenSSL CI

# Controls when the workflow will run
on:
  schedule:
  - cron: "15 13 * * *"

  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  version:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.REPOSITORY }}
          token: ${{ secrets.GH_PAT }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '21'
      - name: Run Java Program and Save Output
        id: java-run
        run: |
          echo "version=$(java -jar ./openssl/openssl.jar)" >> $GITHUB_OUTPUT
    outputs:
      version: ${{ steps.java-run.outputs.version }}

  alpine:
    needs: version
    if: ${{ success() && needs.version.outputs.version != '' }}
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix: 
        openssl: ${{ fromJson(needs.version.outputs.version) }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.REPOSITORY }}
          token: ${{ secrets.GH_PAT }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set Output
        id: set-version
        run: |
          PATCH_VERSION=${{ matrix.openssl }}
          MINOR_VERSION=$(echo "${PATCH_VERSION}" | sed 's/\([0-9]*\.[0-9]*\).*/\1/g')
          echo "patch=${PATCH_VERSION}" >> $GITHUB_OUTPUT
          echo "minor=${MINOR_VERSION}" >> $GITHUB_OUTPUT
          echo "patch=${PATCH_VERSION};minor=${MINOR_VERSION}"
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./openssl/alpine
          build-args: |
            OPENSSL_VERSION_ARG=${{ steps.set-version.outputs.patch }}
          push: true
          platforms: linux/amd64,linux/arm64/v8,linux/ppc64le,linux/s390x
          tags: dph5199278/openssl:${{ steps.set-version.outputs.patch }}-alpine,dph5199278/openssl:${{ steps.set-version.outputs.minor }}-alpine
  debian:
    needs: version
    if: ${{ success() && needs.version.outputs.version != '' }}
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix: 
        openssl: ${{ fromJson(needs.version.outputs.version) }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.REPOSITORY }}
          token: ${{ secrets.GH_PAT }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set Output
        id: set-version
        run: |
          PATCH_VERSION=${{ matrix.openssl }}
          MINOR_VERSION=$(echo "${PATCH_VERSION}" | sed 's/\([0-9]*\.[0-9]*\).*/\1/g')
          echo "patch=${PATCH_VERSION}" >> $GITHUB_OUTPUT
          echo "minor=${MINOR_VERSION}" >> $GITHUB_OUTPUT
          echo "patch=${PATCH_VERSION};minor=${MINOR_VERSION}"
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./openssl/debian
          build-args: |
            OPENSSL_VERSION_ARG=${{ steps.set-version.outputs.patch }}
          push: true
          platforms: linux/amd64,linux/arm64/v8,linux/ppc64le,linux/s390x
          tags: dph5199278/openssl:${{ steps.set-version.outputs.patch }},dph5199278/openssl:${{ steps.set-version.outputs.minor }}

  push:
    needs: [version, alpine, debian]
    if: ${{ success() && needs.version.outputs.version != '' }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:                # Job-level permissions configuration starts here
      contents: write           # 'write' access to repository contents
      pull-requests: write      # 'write' access to pull requests
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          ref: ${{ github.ref }}
          persist-credentials: false

      - name: Update version
        run: |
          echo "${{ needs.version.outputs.version }}" > ./openssl/version.txt
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "docs(openssl): update version"
          git pull --rebase

      - name: Push version
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GH_PAT }}
          branch: ${{ github.ref }}
